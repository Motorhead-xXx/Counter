{"version":3,"sources":["App.module.css","components/counter/Counter.module.css","components/satting/ParametrCounter.module.css","reportWebVitals.ts","components/button/ButtonCustom.tsx","components/button/Button.tsx","reducers/counter-reducer.ts","components/button/ButtonRES.tsx","components/counter/Counter.tsx","components/Input/Input.tsx","reducers/store.ts","utils/localstorage-utils.ts","components/satting/SatingCounter.tsx","App.tsx","index.tsx"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","CustomButtonRoot","styled","CustomButton","props","Button","component","ButtonCounter","callback","title","style","minWidth","padding","disabled","onClick","color","size","variant","initialState","displayValue","maxValue","minValue","error","setLocal","changeErrorAC","err","type","changeSetLocalAC","changeLocal","changeButtonDisabledAC","changeDisabled","ButtonReset","Fab","Refresh","Counter","minValueCounter","useSelector","state","counter","maxValueCounter","dispatch","useDispatch","className","s","wrapperCounter","display","fontSize","fontWeight","buttonWrap","InputCounter","onChange","value","errorState","callbackInput","event","TextField","backgroundColor","borderRadius","rootReducer","combineReducers","action","stateDisplayValue","eventValue","store","createStore","serializedState","localStorage","getItem","JSON","parse","loadState","SettingCounter","wrapperSetting","currentTarget","stringify","setItem","saveState","getState","App","wrapper","Paper","elevation","square","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.50212c50.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__GeIh9\",\"wrapper\":\"App_wrapper__3wrAH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapperCounter\":\"Counter_wrapperCounter__3k5Gb\",\"buttonWrap\":\"Counter_buttonWrap__2MAj3\",\"display\":\"Counter_display__1mqFR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapperSetting\":\"ParametrCounter_wrapperSetting__xMN7F\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import * as React from 'react';\r\nimport ButtonUnstyled from \"@material-ui/core/Button\"\r\nimport buttonUnstyledClasses from \"@material-ui/styled-engine-sc\";\r\nimport ButtonUnstyledProps from \"@material-ui/styled-engine-sc\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nconst CustomButtonRoot = styled('span')(`\r\n  background-color: #89d115;\r\n  padding: 15px 20px;\r\n  border-radius: 10px;\r\n  color: white;\r\n  font-weight: 700;\r\n  font-family: Helvetica, Arial, sans-serif;\r\n  font-size: 14px;\r\n  transition: all 200ms ease;\r\n  cursor: pointer;\r\n  box-shadow: 0 4px 20px 0 rgba(61, 71, 82, 0.1), 0 0 0 0 rgba(0, 127, 255, 0);\r\n  border: none;\r\n\r\n  &:hover {\r\n    background-color: #FFDF84;\r\n  }\r\n\r\n  &:active {\r\n    background-color: #FFD387;\r\n  }\r\n`);\r\n\r\nexport function CustomButton(props: ButtonUnstyledProps) {\r\n    return <ButtonUnstyled {...props} component={CustomButtonRoot} />;\r\n}","import React from \"react\";\r\nimport {CustomButton} from \"./ButtonCustom\";\r\n\r\ntype ButtonType = {\r\n    callback: () => void\r\n    title: string\r\n    disabled: boolean\r\n}\r\n\r\n\r\nexport const ButtonCounter = ({callback, title,...props}: ButtonType) => {\r\n    const callbackButton = () => {\r\n        callback()\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <CustomButton  style={ {minWidth:\"40px\",padding:\"8px\"} } disabled={props.disabled} onClick={callbackButton} color={\"primary\"} size={\"small\"} variant=\"contained\">{title}</CustomButton>\r\n        </div>\r\n    )\r\n\r\n}\r\n","const initialState = {\r\n      displayValue:0,\r\n      maxValue: 0,\r\n      minValue: 0,\r\n      error: false,\r\n      setLocal: false,\r\n      disabled: false,\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const counterReducer = (state = initialState, action:CounterType): InitialStateType => {\r\n      switch (action.type){\r\n            case \"CHANGE-STATE-DISPLAY\":{\r\n                  return {...state, displayValue: action.stateDisplayValue}\r\n            }\r\n            case \"INC-COUNT\":{\r\n                 return  { ...state, displayValue: state.displayValue + 1}\r\n            }\r\n            case \"RESET-COUNT\":{\r\n                  return {...state, displayValue: state.minValue }\r\n            }\r\n            case \"VALUE-MAX\": {\r\n                  return {...state, maxValue: action.eventValue}\r\n            }\r\n            case \"VALUE-MIN\": {\r\n                  return {...state, minValue: action.eventValue}\r\n            }\r\n            case \"CHANGE-ERROR\":{\r\n                  return {...state, error: action.err}\r\n            }\r\n            case \"CHANGE-SET-LOCAL\":{\r\n                  return {...state, setLocal: action.changeLocal}\r\n            }\r\n            case \"CHANGE-BUTTON-DISABLED\":{\r\n                  return {...state, disabled: action.changeDisabled}\r\n            }\r\n      }\r\n      return state\r\n}\r\n\r\ntype CounterType = IncCounterType|ResetDisplayType|displayValueType|settingValueMaxType| settingValueMinType|changeErrorType|ChangeSetLocalType|ChangeButtonDisabledType\r\n\r\nexport type IncCounterType = ReturnType<typeof incCounterAC>\r\nexport const incCounterAC = () => {\r\n      return{\r\n            type: \"INC-COUNT\",\r\n      }as const\r\n}\r\n\r\nexport type ResetDisplayType = ReturnType<typeof resetDisplayAC>\r\nexport const resetDisplayAC = (minValue:number) => {\r\n      return{\r\n            type: \"RESET-COUNT\",\r\n            minValue,\r\n      }as const\r\n}\r\n\r\nexport type displayValueType = ReturnType<typeof changeDisplayValueAC>\r\nexport const changeDisplayValueAC = (stateDisplayValue: number) => {\r\n      return{\r\n            type: \"CHANGE-STATE-DISPLAY\",\r\n            stateDisplayValue,\r\n      }as const\r\n}\r\n\r\nexport type settingValueMaxType = ReturnType<typeof settingValueMaxAC>\r\nexport const settingValueMaxAC = (eventValue: number) => {\r\n      return{\r\n            type: \"VALUE-MAX\",\r\n            eventValue,\r\n      }as const\r\n}\r\n\r\nexport type settingValueMinType = ReturnType<typeof settingValueMinAC>\r\nexport const settingValueMinAC = (eventValue: number) => {\r\n      return{\r\n            type: \"VALUE-MIN\",\r\n            eventValue,\r\n      }as const\r\n}\r\n\r\nexport type changeErrorType = ReturnType<typeof changeErrorAC>\r\nexport const changeErrorAC = (err:boolean) => {\r\n      return{\r\n            type: \"CHANGE-ERROR\",\r\n            err,\r\n      }as const\r\n}\r\n\r\nexport type ChangeSetLocalType = ReturnType<typeof changeSetLocalAC>\r\nexport const changeSetLocalAC = (changeLocal:boolean) => {\r\n      return{\r\n            type: \"CHANGE-SET-LOCAL\",\r\n            changeLocal,\r\n      }as const\r\n}\r\nexport type ChangeButtonDisabledType = ReturnType<typeof changeButtonDisabledAC>\r\nexport const changeButtonDisabledAC = (changeDisabled:boolean) => {\r\n      return{\r\n            type: \"CHANGE-BUTTON-DISABLED\",\r\n            changeDisabled,\r\n      }as const\r\n}","import {Fab} from \"@material-ui/core\";\r\nimport {Refresh} from \"@material-ui/icons\";\r\n\r\ntype ButtonType = {\r\n    callback: () => void\r\n    disabled: boolean\r\n}\r\n\r\n\r\nexport const ButtonReset = ({callback,...props}: ButtonType) => {\r\n    const callbackButton = () => {\r\n        callback()\r\n    }\r\n    return(\r\n        <div>\r\n            <Fab size={\"small\"} color={\"secondary\"} disabled={props.disabled} onClick={callbackButton}>\r\n                <Refresh/>\r\n            </Fab>\r\n        </div>\r\n    )\r\n\r\n}","import {ButtonCounter} from \"../button/Button\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {rootReducerType} from \"../../reducers/store\";\r\nimport {incCounterAC, resetDisplayAC} from \"../../reducers/counter-reducer\";\r\nimport s from './Counter.module.css'\r\nimport {ButtonReset} from \"../button/ButtonRES\";\r\n\r\n\r\nconst Counter = () => {\r\n    const minValueCounter = useSelector<rootReducerType, number>(state => state.counter.minValue)\r\n    const maxValueCounter = useSelector<rootReducerType, number>(state => state.counter.maxValue)\r\n    const error = useSelector<rootReducerType, boolean>(state => state.counter.error)\r\n    const setLocal = useSelector<rootReducerType, boolean>(state => state.counter.setLocal)\r\n\r\n    const displayValue = useSelector<rootReducerType, number>(state => state.counter.displayValue)\r\n    const dispatch = useDispatch()\r\n\r\n    const incCounter = () => {\r\n        dispatch(incCounterAC())\r\n    }\r\n\r\n    const resetDisplay = () => {\r\n        dispatch(resetDisplayAC(minValueCounter))\r\n    }\r\n\r\n    return (\r\n        <div className={s.wrapperCounter}>\r\n            <div className={s.display}>\r\n                    {\r\n                        error ? <span style={{color: \"red\", fontSize:\"20px\",fontWeight:\"bold\"}}>Invalid value!</span> :\r\n\r\n                            setLocal ? <span style={{color: \"blue\",fontSize:\"20px\",fontWeight:\"bold\"}}>Enter values and press \"set\"!</span>\r\n\r\n                                : <span style={displayValue === maxValueCounter ? {color: \"red\", fontSize: \"40px\",fontWeight:\"bold\"} : {\r\n                                    color: \"black\",\r\n                                    fontSize: \"40px\",\r\n                                    fontWeight:\"bold\"\r\n                                }}>{displayValue}</span>\r\n                    }\r\n\r\n            </div>\r\n\r\n            <div className={s.buttonWrap}>\r\n                <ButtonCounter disabled={displayValue >= maxValueCounter || setLocal} callback={incCounter} title={\"+\"}/>\r\n                <ButtonReset disabled={displayValue === minValueCounter || setLocal} callback={resetDisplay}/>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Counter;","import React, {ChangeEvent} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {rootReducerType} from \"../../reducers/store\";\r\n\r\ntype InputCounterType = {\r\n    onChange: (event: ChangeEvent<HTMLInputElement>) => void\r\n    value: number\r\n}\r\n\r\n\r\nexport const InputCounter = ({onChange, value}: InputCounterType) => {\r\n    const errorState = useSelector<rootReducerType, boolean>(state => state.counter.error)\r\n\r\n    const callbackInput = (event:ChangeEvent<HTMLInputElement>) => {\r\n        onChange(event)\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            {errorState?\r\n                <TextField  error size={\"small\"} type={'number'} style={{backgroundColor:\"white\",borderRadius:\"5px\"}}\r\n                            variant={'outlined'} onChange={callbackInput} value={value}/>:\r\n\r\n                <TextField  size={\"small\"} style={{backgroundColor:\"white\",borderRadius:\"5px\"}}  color='primary' type={'number'} variant={'outlined'}  onChange={callbackInput} value={value}/>\r\n            }\r\n\r\n            {/*<TextField  error label=\"Error\"*/}\r\n            {/*    size={\"small\"} type={'number'} variant={'outlined'} onChange={callbackInput} value={value}  />*/}\r\n\r\n            {/*<input type={\"number\"} onChange={callbackInput} value={value} />*/}\r\n        </div>\r\n    )\r\n\r\n}","import {combineReducers, createStore} from \"redux\";\r\nimport {counterReducer} from \"./counter-reducer\";\r\nimport {loadState} from \"../utils/localstorage-utils\";\r\n\r\nexport type rootReducerType = ReturnType<typeof rootReducer>\r\nexport type AppStoreType = typeof store\r\n\r\nconst rootReducer = combineReducers({\r\n    counter: counterReducer,\r\n})\r\n\r\n\r\n\r\nexport const store = createStore(rootReducer,loadState())\r\n\r\n\r\n","import {rootReducerType} from \"../reducers/store\";\r\n\r\nexport const loadState = () => {\r\n    try{\r\n        const serializedState = localStorage.getItem('app-state');\r\n        if(serializedState === null){\r\n            return undefined;\r\n        }\r\n        return JSON.parse(serializedState)\r\n    } catch (err){\r\n        return undefined;\r\n    }\r\n};\r\n\r\n\r\nexport const saveState = (state: rootReducerType) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem('app-state', serializedState);\r\n    } catch {\r\n        // ignore write errors\r\n    }\r\n};","import React, {ChangeEvent} from \"react\";\r\nimport {InputCounter} from \"../Input/Input\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {rootReducerType, store} from \"../../reducers/store\";\r\nimport {\r\n    changeButtonDisabledAC,\r\n    changeDisplayValueAC,\r\n    changeErrorAC, changeSetLocalAC,\r\n    settingValueMaxAC,\r\n    settingValueMinAC\r\n} from \"../../reducers/counter-reducer\";\r\nimport {ButtonCounter} from \"../button/Button\";\r\nimport {saveState} from \"../../utils/localstorage-utils\";\r\nimport s from './ParametrCounter.module.css'\r\n\r\n\r\nexport const SettingCounter = () => {\r\n    const disabled = useSelector<rootReducerType, boolean>(state => state.counter.disabled)\r\n    const minValue = useSelector<rootReducerType, number>(state => state.counter.minValue)\r\n    const maxValue = useSelector<rootReducerType, number>(state => state.counter.maxValue)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const settingValueMax = (event: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(settingValueMaxAC(+event.currentTarget.value))\r\n        dispatch(changeSetLocalAC(true))\r\n        dispatch(changeButtonDisabledAC(false))\r\n    }\r\n\r\n    const settingValueMin = (event: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(settingValueMinAC(+event.currentTarget.value))\r\n        dispatch(changeSetLocalAC(true))\r\n        dispatch(changeButtonDisabledAC(false))\r\n    }\r\n\r\n    if (minValue >= maxValue || minValue < 0) {\r\n        dispatch(changeErrorAC(true))\r\n        dispatch(changeButtonDisabledAC(true))\r\n    } else {\r\n        dispatch(changeErrorAC(false))\r\n    }\r\n\r\n    const saveLocalStorage = () => {\r\n        dispatch(changeButtonDisabledAC(true))\r\n\r\n        dispatch(changeDisplayValueAC(minValue))\r\n\r\n        dispatch(changeSetLocalAC(false))\r\n\r\n        saveState({\r\n            counter: store.getState().counter,\r\n        })\r\n    }\r\n\r\n\r\n    return (\r\n\r\n        <div className={s.wrapperSetting}>\r\n                <InputCounter onChange={settingValueMax} value={maxValue}/>\r\n                <InputCounter onChange={settingValueMin} value={minValue}/>\r\n                <ButtonCounter callback={saveLocalStorage} title={\"set\"} disabled={disabled}/>\r\n\r\n        </div>\r\n    )\r\n\r\n}","import React from 'react';\nimport './App.module.css';\nimport Counter from \"./components/counter/Counter\";\nimport {SettingCounter} from \"./components/satting/SatingCounter\";\nimport s from './App.module.css'\nimport {Paper} from \"@material-ui/core\";\n\n\nfunction App() {\n    return (\n\n        <div className={s.wrapper}>\n            <div className={s.App}>\n\n                <Paper style={{backgroundColor:\"#a5bfd0\"}} elevation={6}  variant=\"elevation\" >\n                <SettingCounter/>\n                </Paper >\n\n                <Paper style={{backgroundColor:\"#d3b8a1\"}} square={true} elevation={4}  variant=\"elevation\">\n                    <Counter/>\n                </Paper >\n\n            </div>\n        </div>\n\n    );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from \"./App\";\nimport {store} from \"./reducers/store\";\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App/>\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}