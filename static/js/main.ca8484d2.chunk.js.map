{"version":3,"sources":["components/setting/ParametrCounter.module.css","App.module.css","components/counter/Counter.module.css","reportWebVitals.ts","components/button/ButtonCustom.tsx","components/button/Button.tsx","reducers/counter-reducer.ts","components/button/ButtonRES.tsx","components/counter/Counter.tsx","components/input/Input.tsx","reducers/store.ts","utils/localstorage-utils.ts","components/setting/SetingCounter.tsx","App.tsx","index.tsx"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","CustomButtonRoot","styled","CustomButton","props","Button","component","ButtonCounter","callback","title","style","minWidth","padding","disabled","onClick","color","size","variant","initialState","displayValue","maxValue","minValue","error","setLocal","settingValueMaxAC","eventValue","type","settingValueMinAC","changeErrorAC","err","changeSetLocalAC","changeLocal","changeButtonDisabledAC","changeDisabled","ButtonReset","Fab","Refresh","Counter","minValueCounter","useSelector","state","counter","maxValueCounter","dispatch","useDispatch","className","s","wrapperCounter","display","fontSize","fontWeight","buttonWrap","InputCounter","onChange","value","errorState","callbackInput","event","TextField","backgroundColor","borderRadius","rootReducer","combineReducers","action","stateDisplayValue","store","createStore","serializedState","localStorage","getItem","JSON","parse","loadState","SettingCounter","styleButton","marginLeft","height","wrapperSetting","inputWrapper","currentTarget","isFinite","buttonWrapper","stringify","setItem","saveState","getState","App","wrapper","Paper","elevation","square","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ca8484d2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapperSetting\":\"ParametrCounter_wrapperSetting__2doUo\",\"inputWrapper\":\"ParametrCounter_inputWrapper__2YqKn\",\"buttonWrapper\":\"ParametrCounter_buttonWrapper__jwIpv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__GeIh9\",\"wrapper\":\"App_wrapper__3wrAH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapperCounter\":\"Counter_wrapperCounter__3k5Gb\",\"buttonWrap\":\"Counter_buttonWrap__2MAj3\",\"display\":\"Counter_display__1mqFR\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import * as React from 'react';\r\nimport ButtonUnstyled from \"@material-ui/core/Button\"\r\nimport ButtonProps from \"@material-ui/styled-engine-sc\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nconst CustomButtonRoot = styled('span')(`\r\n  background-color: #89d115;\r\n  padding: 15px 20px;\r\n  border-radius: 10px;\r\n  color: white;\r\n  font-weight: 700;\r\n  font-family: Helvetica, Arial, sans-serif;\r\n  font-size: 14px;\r\n  transition: all 200ms ease;\r\n  cursor: pointer;\r\n  box-shadow: 0 4px 20px 0 rgba(61, 71, 82, 0.1), 0 0 0 0 rgba(0, 127, 255, 0);\r\n  border: none;\r\n\r\n  &:hover {\r\n    background-color: #FFDF84;\r\n  }\r\n\r\n  &:active {\r\n    background-color: #FFD387;\r\n  }\r\n`);\r\n\r\nexport function CustomButton(props: ButtonProps) {\r\n    return <ButtonUnstyled {...props} component={CustomButtonRoot} />;\r\n}","import React from \"react\";\r\nimport {CustomButton} from \"./ButtonCustom\";\r\n\r\ntype ButtonType = {\r\n    callback?: () => void\r\n    title?: string\r\n    disabled?: boolean\r\n}\r\n\r\n\r\nexport const ButtonCounter = ({callback, title,...props}: ButtonType) => {\r\n    const callbackButton = () => {\r\n        if (callback) {\r\n            callback()\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <CustomButton  style={ {minWidth:\"40px\",padding:\"8px\"} } disabled={props.disabled} onClick={callbackButton} color={\"primary\"} size={\"small\"} variant=\"contained\">{title}</CustomButton>\r\n        </div>\r\n    )\r\n\r\n}\r\n","const initialState = {\r\n    displayValue: 0,\r\n    maxValue: \"\",\r\n    minValue: \"\",\r\n    error: false,\r\n    setLocal: false,\r\n    disabled: false,\r\n}\r\n\r\ntype InitialStateType = {\r\n    displayValue: number,\r\n    maxValue: string | number,\r\n    minValue: string | number,\r\n    error: boolean,\r\n    setLocal: boolean,\r\n    disabled: boolean,\r\n}\r\n\r\nexport const counterReducer = (state: InitialStateType = initialState, action: CounterType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"CHANGE-STATE-DISPLAY\": {\r\n            return {...state, displayValue: +action.stateDisplayValue}\r\n        }\r\n        case \"INC-COUNT\": {\r\n            return {...state, displayValue: state.displayValue + 1}\r\n        }\r\n        case \"RESET-COUNT\": {\r\n            return {...state, displayValue: +state.minValue}\r\n        }\r\n        case \"VALUE-MAX\": {\r\n            return {...state, maxValue: action.eventValue}\r\n        }\r\n        case \"VALUE-MIN\": {\r\n            return {...state, minValue: action.eventValue}\r\n        }\r\n        case \"CHANGE-ERROR\": {\r\n            return {...state, error: action.err}\r\n        }\r\n        case \"CHANGE-SET-LOCAL\": {\r\n            return {...state, setLocal: action.changeLocal}\r\n        }\r\n        case \"CHANGE-BUTTON-DISABLED\": {\r\n            return {...state, disabled: action.changeDisabled}\r\n        }\r\n        case \"INC-MAX\": {\r\n            return {...state, maxValue: +state.maxValue + 1}\r\n        }\r\n        case \"DECREASE-MIN\": {\r\n            return {...state, maxValue: +state.maxValue - 1}\r\n        }\r\n        case \"MIN-INC\": {\r\n            return {...state, minValue: +state.minValue + 1}\r\n        }\r\n        case \"MIN-DECREASE\": {\r\n            return {...state, minValue: +state.minValue - 1}\r\n        }\r\n    }\r\n    return state\r\n}\r\n\r\ntype CounterType = IncCounterType | ResetDisplayType | ValueMaxIncType |\r\n    displayValueType | settingValueMaxType | settingValueMinType |\r\n    changeErrorType | ChangeSetLocalType | ChangeButtonDisabledType | ValueMaxDecreaseType |\r\n    minValueIncType | minValueDecreaseType\r\n\r\nexport type IncCounterType = ReturnType<typeof incCounterAC>\r\nexport const incCounterAC = () => {\r\n    return {\r\n        type: \"INC-COUNT\",\r\n    } as const\r\n}\r\n\r\nexport type ResetDisplayType = ReturnType<typeof resetDisplayAC>\r\nexport const resetDisplayAC = (minValue: number) => {\r\n    return {\r\n        type: \"RESET-COUNT\",\r\n        minValue,\r\n    } as const\r\n}\r\n\r\nexport type displayValueType = ReturnType<typeof changeDisplayValueAC>\r\nexport const changeDisplayValueAC = (stateDisplayValue: string | number) => {\r\n    return {\r\n        type: \"CHANGE-STATE-DISPLAY\",\r\n        stateDisplayValue,\r\n    } as const\r\n}\r\n\r\nexport type settingValueMaxType = ReturnType<typeof settingValueMaxAC>\r\nexport const settingValueMaxAC = (eventValue: string | number) => {\r\n    return {\r\n        type: \"VALUE-MAX\",\r\n        eventValue,\r\n    } as const\r\n}\r\n\r\nexport type settingValueMinType = ReturnType<typeof settingValueMinAC>\r\nexport const settingValueMinAC = (eventValue: string | number) => {\r\n    return {\r\n        type: \"VALUE-MIN\",\r\n        eventValue,\r\n    } as const\r\n}\r\n\r\nexport type changeErrorType = ReturnType<typeof changeErrorAC>\r\nexport const changeErrorAC = (err: boolean) => {\r\n    return {\r\n        type: \"CHANGE-ERROR\",\r\n        err,\r\n    } as const\r\n}\r\n\r\nexport type ChangeSetLocalType = ReturnType<typeof changeSetLocalAC>\r\nexport const changeSetLocalAC = (changeLocal: boolean) => {\r\n    return {\r\n        type: \"CHANGE-SET-LOCAL\",\r\n        changeLocal,\r\n    } as const\r\n}\r\nexport type ChangeButtonDisabledType = ReturnType<typeof changeButtonDisabledAC>\r\nexport const changeButtonDisabledAC = (changeDisabled: boolean) => {\r\n    return {\r\n        type: \"CHANGE-BUTTON-DISABLED\",\r\n        changeDisabled,\r\n    } as const\r\n}\r\n\r\nexport type ValueMaxIncType = ReturnType<typeof valueMaxIncAC>\r\nexport const valueMaxIncAC = () => {\r\n    return {\r\n        type: \"INC-MAX\",\r\n    } as const\r\n}\r\n\r\nexport type ValueMaxDecreaseType = ReturnType<typeof valueMaxDecreaseAC>\r\nexport const valueMaxDecreaseAC = () => {\r\n    return {\r\n        type: \"DECREASE-MIN\",\r\n    } as const\r\n}\r\n\r\nexport type minValueIncType = ReturnType<typeof minValueIncAC>\r\nexport const minValueIncAC = () => {\r\n    return {\r\n        type: \"MIN-INC\",\r\n    } as const\r\n}\r\nexport type minValueDecreaseType = ReturnType<typeof minValueDecreaseAC>\r\nexport const minValueDecreaseAC = () => {\r\n    return {\r\n        type: \"MIN-DECREASE\",\r\n    } as const\r\n}","import {Fab} from \"@material-ui/core\";\r\nimport {Refresh} from \"@material-ui/icons\";\r\n\r\ntype ButtonType = {\r\n    callback: () => void\r\n    disabled: boolean\r\n}\r\n\r\n\r\nexport const ButtonReset = ({callback,...props}: ButtonType) => {\r\n    const callbackButton = () => {\r\n        callback()\r\n    }\r\n    return(\r\n        <div>\r\n            <Fab size={\"small\"} color={\"primary\"} disabled={props.disabled} onClick={callbackButton}>\r\n                <Refresh/>\r\n            </Fab>\r\n        </div>\r\n    )\r\n\r\n}","import {ButtonCounter} from \"../button/Button\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {rootReducerType} from \"../../reducers/store\";\r\nimport {incCounterAC, resetDisplayAC} from \"../../reducers/counter-reducer\";\r\nimport s from './Counter.module.css'\r\nimport {ButtonReset} from \"../button/ButtonRES\";\r\n\r\nconst Counter = () => {\r\n    const minValueCounter = useSelector<rootReducerType, string | number>(state => state.counter.minValue)\r\n    const maxValueCounter = useSelector<rootReducerType, string | number>(state => state.counter.maxValue)\r\n    const error = useSelector<rootReducerType, boolean>(state => state.counter.error)\r\n    const setLocal = useSelector<rootReducerType, boolean>(state => state.counter.setLocal)\r\n\r\n    const displayValue = useSelector<rootReducerType, string | number>(state => state.counter.displayValue)\r\n    const dispatch = useDispatch()\r\n\r\n    const incCounter = () => {\r\n        dispatch(incCounterAC())\r\n    }\r\n\r\n    const resetDisplay = () => {\r\n        dispatch(resetDisplayAC(+minValueCounter))\r\n    }\r\n\r\n    return (\r\n        <div className={s.wrapperCounter}>\r\n            <div className={s.display}>\r\n                {\r\n                    error ? <span style={{color: \"red\", fontSize: \"35px\", fontWeight: \"bold\"}}>Invalid value!</span> :\r\n                        setLocal ?<span style={{color: \"blue\", padding:\"15px\",fontSize: '25px', fontWeight: \"bold\"}}>Enter values and press \"set\"!</span>\r\n                            : <span style={displayValue === maxValueCounter ? {color: \"red\", fontSize: \"40px\", fontWeight: \"bold\"} :\r\n                                {color: \"black\",fontSize: \"40px\",fontWeight: \"bold\"}}>{displayValue}</span>\r\n                }\r\n\r\n            </div>\r\n\r\n            <div className={s.buttonWrap}>\r\n                <ButtonCounter disabled={displayValue >= maxValueCounter || setLocal} callback={incCounter} title={\"+\"}/>\r\n                <ButtonReset disabled={displayValue === minValueCounter || setLocal} callback={resetDisplay}/>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Counter;","import React, {ChangeEvent} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {rootReducerType} from \"../../reducers/store\";\r\n\r\ntype InputCounterType = {\r\n    onChange: (event: ChangeEvent<HTMLInputElement>) => void\r\n    value: string | number\r\n}\r\nexport const InputCounter = ({onChange, value}: InputCounterType) => {\r\n    const errorState = useSelector<rootReducerType, boolean>(state => state.counter.error)\r\n\r\n    const callbackInput = (event: ChangeEvent<HTMLInputElement>) => {\r\n        onChange(event)\r\n    }\r\n    return (\r\n        <div>\r\n            {errorState ?\r\n                <TextField error size={\"small\"} style={{backgroundColor: \"white\", borderRadius: \"5px\"}}\r\n                           variant={'outlined'} onChange={callbackInput} value={value}/> :\r\n                <TextField size={\"small\"} style={{backgroundColor: \"white\", borderRadius: \"5px\"}} color='primary' variant={'outlined'} onChange={callbackInput}\r\n                           value={value}/>\r\n            }\r\n        </div>\r\n    )\r\n}","import {combineReducers, createStore} from \"redux\";\r\nimport {counterReducer} from \"./counter-reducer\";\r\nimport {loadState} from \"../utils/localstorage-utils\";\r\n\r\nexport type rootReducerType = ReturnType<typeof rootReducer>\r\nexport type AppStoreType = typeof store\r\n\r\nconst rootReducer = combineReducers({\r\n    counter: counterReducer,\r\n})\r\n\r\n\r\n\r\nexport const store = createStore(rootReducer,loadState())\r\n\r\n\r\n","import {rootReducerType} from \"../reducers/store\";\r\n\r\nexport const loadState = () => {\r\n    try{\r\n        const serializedState = localStorage.getItem('app-state');\r\n        if(serializedState === null){\r\n            return undefined;\r\n        }\r\n        return JSON.parse(serializedState)\r\n    } catch (err){\r\n        return undefined;\r\n    }\r\n};\r\n\r\n\r\nexport const saveState = (state: rootReducerType) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem('app-state', serializedState);\r\n    } catch {\r\n        // ignore write errors\r\n    }\r\n};","import React, {ChangeEvent} from \"react\";\r\nimport {InputCounter} from \"../input/Input\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {rootReducerType, store} from \"../../reducers/store\";\r\nimport {\r\n    changeButtonDisabledAC,\r\n    changeDisplayValueAC,\r\n    changeErrorAC,\r\n    changeSetLocalAC, minValueDecreaseAC, minValueIncAC,\r\n    settingValueMaxAC,\r\n    settingValueMinAC,\r\n    valueMaxDecreaseAC,\r\n    valueMaxIncAC\r\n} from \"../../reducers/counter-reducer\";\r\nimport {ButtonCounter} from \"../button/Button\";\r\nimport {saveState} from \"../../utils/localstorage-utils\";\r\nimport s from './ParametrCounter.module.css'\r\nimport {CustomButton} from \"../button/ButtonCustom\";\r\n\r\n\r\nexport const SettingCounter = () => {\r\n    const disabled = useSelector<rootReducerType, boolean>(state => state.counter.disabled)\r\n    const minValue = useSelector<rootReducerType, string | number>(state => state.counter.minValue)\r\n    const maxValue = useSelector<rootReducerType, string | number>(state => state.counter.maxValue)\r\n    const dispatch = useDispatch()\r\n\r\n    const settingValueMax = (event: ChangeEvent<HTMLInputElement>) => {\r\n        const value = event.currentTarget.value\r\n        if (!isFinite(+value)) return;\r\n        dispatch(settingValueMaxAC(value))\r\n        dispatch(changeSetLocalAC(true))\r\n        dispatch(changeButtonDisabledAC(false))\r\n    }\r\n    const MaxValueInc = () => {\r\n        dispatch(settingValueMaxAC(maxValue))\r\n        dispatch(changeSetLocalAC(true))\r\n        dispatch(changeButtonDisabledAC(false))\r\n        dispatch(valueMaxIncAC())\r\n    }\r\n    const MaxValueDecrease = () => {\r\n        dispatch(settingValueMaxAC(maxValue))\r\n        dispatch(changeSetLocalAC(true))\r\n        dispatch(changeButtonDisabledAC(false))\r\n        dispatch(valueMaxDecreaseAC())\r\n    }\r\n\r\n    const settingValueMin = (event: ChangeEvent<HTMLInputElement>) => {\r\n        const value = event.currentTarget.value\r\n        if (!isFinite(+value)) return;\r\n        dispatch(settingValueMinAC(value))\r\n        dispatch(changeSetLocalAC(true))\r\n        dispatch(changeButtonDisabledAC(false))\r\n    }\r\n    const MinValueInc = () => {\r\n        dispatch(settingValueMinAC(minValue))\r\n        dispatch(changeSetLocalAC(true))\r\n        dispatch(changeButtonDisabledAC(false))\r\n        dispatch(minValueIncAC())\r\n    }\r\n    const MinValueDecrease = () => {\r\n        dispatch(settingValueMinAC(minValue))\r\n        dispatch(changeSetLocalAC(true))\r\n        dispatch(changeButtonDisabledAC(false))\r\n        dispatch(minValueDecreaseAC())\r\n    }\r\n\r\n    if (minValue >= maxValue || minValue < 0 || minValue === \"\" || maxValue === \"\") {\r\n        dispatch(changeErrorAC(true))\r\n        dispatch(changeButtonDisabledAC(true))\r\n    } else {\r\n        dispatch(changeErrorAC(false))\r\n    }\r\n\r\n    const saveLocalStorage = () => {\r\n        dispatch(changeButtonDisabledAC(true))\r\n        dispatch(changeDisplayValueAC(minValue))\r\n        dispatch(changeSetLocalAC(false))\r\n        saveState({\r\n            counter: store.getState().counter,\r\n        })\r\n    }\r\n\r\n    const styleButton = {\r\n        marginLeft: \"1px\",\r\n        minWidth: \"10px\",\r\n        padding: \"9.8px 6px\",\r\n        height: \"15px\",\r\n        borderRadius: \"4px\",\r\n    }\r\n    return (\r\n        <div className={s.wrapperSetting}>\r\n            <div className={s.inputWrapper}>\r\n                <InputCounter onChange={settingValueMax} value={maxValue}/>\r\n                <div className={s.buttonWrapper}>\r\n                    <CustomButton onClick={MaxValueInc} style={styleButton}>+</CustomButton>\r\n                    <CustomButton onClick={MaxValueDecrease} style={styleButton}>-</CustomButton>\r\n                </div>\r\n            </div>\r\n            <div className={s.inputWrapper}>\r\n                <InputCounter onChange={settingValueMin} value={minValue}/>\r\n                <div className={s.buttonWrapper}>\r\n                    <CustomButton onClick={MinValueInc} style={styleButton}>+</CustomButton>\r\n                    <CustomButton onClick={MinValueDecrease} style={styleButton}>-</CustomButton>\r\n                </div>\r\n            </div>\r\n            <ButtonCounter callback={saveLocalStorage} title={\"set\"} disabled={disabled}/>\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport './App.module.css';\nimport Counter from \"./components/counter/Counter\";\nimport {SettingCounter} from \"./components/setting/SetingCounter\";\nimport s from './App.module.css'\nimport {Paper} from \"@material-ui/core\";\n\n\nfunction App() {\n    return (\n\n        <div className={s.wrapper}>\n            <div className={s.App}>\n                <Paper style={{backgroundColor:\"#a5bfd0\",borderRadius:\"10px\"}} elevation={6}  variant=\"elevation\" >\n                <SettingCounter/>\n                </Paper >\n                <Paper style={{backgroundColor:\"#d3b8a1\",borderRadius:\"60px\"}} square={true} elevation={4}  variant=\"elevation\">\n                    <Counter/>\n                </Paper >\n            </div>\n        </div>\n\n    );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from \"./App\";\nimport {store} from \"./reducers/store\";\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App/>\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}