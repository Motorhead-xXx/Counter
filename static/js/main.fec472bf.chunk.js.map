{"version":3,"sources":["Components/setting/ParametrCounter.module.css","App.module.css","Components/Counter/Counter.module.css","reportWebVitals.ts","Components/Input/Input.tsx","reducers/counter-reducer.ts","reducers/store.ts","utils/localstorage-utils.ts","Components/Button/Button.tsx","Components/setting/SetingCounter.tsx","Components/Button/ButtonRES.tsx","Components/Counter/Counter.tsx","App.tsx","index.tsx"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","InputCounter","onChange","value","errorState","useSelector","state","counter","error","callbackInput","event","TextField","size","style","backgroundColor","borderRadius","variant","color","initialState","displayValue","maxValue","minValue","setLocal","disabled","settingValueMaxAC","eventValue","type","settingValueMinAC","changeErrorAC","err","changeSetLocalAC","changeLocal","changeButtonDisabledAC","changeDisabled","rootReducer","combineReducers","action","stateDisplayValue","store","createStore","serializedState","localStorage","getItem","JSON","parse","loadState","ButtonCounter","callback","title","props","Button","minWidth","padding","fontWeight","onClick","SettingCounter","dispatch","useDispatch","styleButton","marginLeft","height","className","s","wrapperSetting","inputWrapper","currentTarget","isFinite","buttonWrapper","stringify","setItem","saveState","getState","ButtonReset","Fab","Refresh","Counter","minValueCounter","maxValueCounter","wrapperCounter","display","fontSize","buttonWrap","App","wrapper","Paper","elevation","square","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fec472bf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapperSetting\":\"ParametrCounter_wrapperSetting__BC1zC\",\"inputWrapper\":\"ParametrCounter_inputWrapper__2zowv\",\"buttonWrapper\":\"ParametrCounter_buttonWrapper__1dBmN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__3bPUy\",\"wrapper\":\"App_wrapper__2FtWU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapperCounter\":\"Counter_wrapperCounter__3G2si\",\"buttonWrap\":\"Counter_buttonWrap__2cZ6L\",\"display\":\"Counter_display__21gFt\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, {ChangeEvent} from \"react\";\nimport {TextField} from \"@material-ui/core\";\nimport {useSelector} from \"react-redux\";\nimport {rootReducerType} from \"../../reducers/store\";\n\ntype InputCounterType = {\n    onChange: (event: ChangeEvent<HTMLInputElement>) => void\n    value: string | number\n}\n\n\nexport const InputCounter = ({onChange, value}: InputCounterType) => {\n    const errorState = useSelector<rootReducerType, boolean>(state => state.counter.error)\n\n    const callbackInput = (event: ChangeEvent<HTMLInputElement>) => {\n        onChange(event)\n    }\n\n    return (\n        <div>\n            {errorState ?\n                <TextField error size={\"small\"} style={{backgroundColor: \"white\", borderRadius: \"5px\"}}\n                           variant={'outlined'} onChange={callbackInput} value={value}/> :\n\n                <TextField size={\"small\"} style={{backgroundColor: \"white\", borderRadius: \"5px\"}} color='primary' variant={'outlined'} onChange={callbackInput}\n                           value={value}/>\n            }\n\n            {/*<TextField  error label=\"Error\"*/}\n            {/*    size={\"small\"} type={'number'} variant={'outlined'} onChange={callbackInput} value={value}  />*/}\n\n            {/*<input type={\"number\"} onChange={callbackInput} value={value} />*/}\n        </div>\n    )\n\n}","const initialState = {\n    displayValue: 0,\n    maxValue: \"\",\n    minValue: \"\",\n    error: false,\n    setLocal: false,\n    disabled: false,\n}\n\ntype InitialStateType = {\n    displayValue: number,\n    maxValue: string | number,\n    minValue: string | number,\n    error: boolean,\n    setLocal: boolean,\n    disabled: boolean,\n}\n\nexport const counterReducer = (state: InitialStateType = initialState, action: CounterType): InitialStateType => {\n    switch (action.type) {\n        case \"CHANGE-STATE-DISPLAY\": {\n            return {...state, displayValue: +action.stateDisplayValue}\n        }\n        case \"INC-COUNT\": {\n            return {...state, displayValue: state.displayValue + 1}\n        }\n        case \"RESET-COUNT\": {\n            return {...state, displayValue: +state.minValue}\n        }\n        case \"VALUE-MAX\": {\n            return {...state, maxValue: action.eventValue}\n        }\n        case \"VALUE-MIN\": {\n            return {...state, minValue: action.eventValue}\n        }\n        case \"CHANGE-ERROR\": {\n            return {...state, error: action.err}\n        }\n        case \"CHANGE-SET-LOCAL\": {\n            return {...state, setLocal: action.changeLocal}\n        }\n        case \"CHANGE-BUTTON-DISABLED\": {\n            return {...state, disabled: action.changeDisabled}\n        }\n        case \"INC-MAX\": {\n            return {...state, maxValue: +state.maxValue + 1}\n        }\n        case \"DECREASE-MIN\": {\n            return {...state, maxValue: +state.maxValue - 1}\n        }\n        case \"MIN-INC\": {\n            return {...state, minValue: +state.minValue + 1}\n        }\n        case \"MIN-DECREASE\": {\n            return {...state, minValue: +state.minValue - 1}\n        }\n    }\n    return state\n}\n\ntype CounterType = IncCounterType | ResetDisplayType | ValueMaxIncType |\n    displayValueType | settingValueMaxType | settingValueMinType |\n    changeErrorType | ChangeSetLocalType | ChangeButtonDisabledType | ValueMaxDecreaseType |\n    minValueIncType | minValueDecreaseType\n\nexport type IncCounterType = ReturnType<typeof incCounterAC>\nexport const incCounterAC = () => {\n    return {\n        type: \"INC-COUNT\",\n    } as const\n}\n\nexport type ResetDisplayType = ReturnType<typeof resetDisplayAC>\nexport const resetDisplayAC = (minValue: number) => {\n    return {\n        type: \"RESET-COUNT\",\n        minValue,\n    } as const\n}\n\nexport type displayValueType = ReturnType<typeof changeDisplayValueAC>\nexport const changeDisplayValueAC = (stateDisplayValue: string | number) => {\n    return {\n        type: \"CHANGE-STATE-DISPLAY\",\n        stateDisplayValue,\n    } as const\n}\n\nexport type settingValueMaxType = ReturnType<typeof settingValueMaxAC>\nexport const settingValueMaxAC = (eventValue: string | number) => {\n    return {\n        type: \"VALUE-MAX\",\n        eventValue,\n    } as const\n}\n\nexport type settingValueMinType = ReturnType<typeof settingValueMinAC>\nexport const settingValueMinAC = (eventValue: string | number) => {\n    return {\n        type: \"VALUE-MIN\",\n        eventValue,\n    } as const\n}\n\nexport type changeErrorType = ReturnType<typeof changeErrorAC>\nexport const changeErrorAC = (err: boolean) => {\n    return {\n        type: \"CHANGE-ERROR\",\n        err,\n    } as const\n}\n\nexport type ChangeSetLocalType = ReturnType<typeof changeSetLocalAC>\nexport const changeSetLocalAC = (changeLocal: boolean) => {\n    return {\n        type: \"CHANGE-SET-LOCAL\",\n        changeLocal,\n    } as const\n}\nexport type ChangeButtonDisabledType = ReturnType<typeof changeButtonDisabledAC>\nexport const changeButtonDisabledAC = (changeDisabled: boolean) => {\n    return {\n        type: \"CHANGE-BUTTON-DISABLED\",\n        changeDisabled,\n    } as const\n}\n\nexport type ValueMaxIncType = ReturnType<typeof valueMaxIncAC>\nexport const valueMaxIncAC = () => {\n    return {\n        type: \"INC-MAX\",\n    } as const\n}\n\nexport type ValueMaxDecreaseType = ReturnType<typeof valueMaxDecreaseAC>\nexport const valueMaxDecreaseAC = () => {\n    return {\n        type: \"DECREASE-MIN\",\n    } as const\n}\n\nexport type minValueIncType = ReturnType<typeof minValueIncAC>\nexport const minValueIncAC = () => {\n    return {\n        type: \"MIN-INC\",\n    } as const\n}\nexport type minValueDecreaseType = ReturnType<typeof minValueDecreaseAC>\nexport const minValueDecreaseAC = () => {\n    return {\n        type: \"MIN-DECREASE\",\n    } as const\n}","import {combineReducers, createStore} from \"redux\";\nimport {counterReducer} from \"./counter-reducer\";\nimport {loadState} from \"../utils/localstorage-utils\";\n\nexport type rootReducerType = ReturnType<typeof rootReducer>\nexport type AppStoreType = typeof store\n\nconst rootReducer = combineReducers({\n    counter: counterReducer,\n})\n\n\n\nexport const store = createStore(rootReducer,loadState())\n\n\n","import {rootReducerType} from \"../reducers/store\";\n\nexport const loadState = () => {\n    try{\n        const serializedState = localStorage.getItem('app-state');\n        if(serializedState === null){\n            return undefined;\n        }\n        return JSON.parse(serializedState)\n    } catch (err){\n        return undefined;\n    }\n};\n\n\nexport const saveState = (state: rootReducerType) => {\n    try {\n        const serializedState = JSON.stringify(state);\n        localStorage.setItem('app-state', serializedState);\n    } catch {\n        // ignore write errors\n    }\n};","import React from \"react\";\nimport {Button} from \"@material-ui/core\";\n\n\ntype ButtonType = {\n    callback?: () => void\n    title?: string\n    disabled?: boolean\n}\n\n\nexport const ButtonCounter = ({callback, title,...props}: ButtonType) => {\n    const callbackButton = () => {\n        if (callback) {\n            callback()\n        }\n    }\n\n    return(\n        <div>\n            <Button style={ {minWidth:\"40px\",padding:\"8px\", fontWeight:\"bold\"} } disabled={props.disabled} onClick={callbackButton} color={\"inherit\"} size={\"small\"} variant=\"contained\">{title}</Button>\n        </div>\n    )\n\n}\n","import React, {ChangeEvent} from \"react\";\nimport {InputCounter} from \"../Input/Input\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {rootReducerType, store} from \"../../reducers/store\";\nimport {\n    changeButtonDisabledAC,\n    changeDisplayValueAC,\n    changeErrorAC,\n    changeSetLocalAC, minValueDecreaseAC, minValueIncAC,\n    settingValueMaxAC,\n    settingValueMinAC,\n    valueMaxDecreaseAC,\n    valueMaxIncAC\n} from \"../../reducers/counter-reducer\";\nimport {ButtonCounter} from \"../Button/Button\";\nimport {saveState} from \"../../utils/localstorage-utils\";\nimport s from './ParametrCounter.module.css'\nimport {Button} from \"@material-ui/core\";\n\n\nexport const SettingCounter = () => {\n    const disabled = useSelector<rootReducerType, boolean>(state => state.counter.disabled)\n    const minValue = useSelector<rootReducerType, string | number>(state => state.counter.minValue)\n    const maxValue = useSelector<rootReducerType, string | number>(state => state.counter.maxValue)\n    const dispatch = useDispatch()\n\n\n    const settingValueMax = (event: ChangeEvent<HTMLInputElement>) => {\n        const value = event.currentTarget.value\n        if (!isFinite(+value)) return;\n        dispatch(settingValueMaxAC(value))\n        dispatch(changeSetLocalAC(true))\n        dispatch(changeButtonDisabledAC(false))\n    }\n\n    const MaxValueInc = () => {\n        dispatch(settingValueMaxAC(maxValue))\n        dispatch(changeSetLocalAC(true))\n        dispatch(changeButtonDisabledAC(false))\n        dispatch(valueMaxIncAC())\n    }\n    const MaxValueDecrease = () => {\n        dispatch(settingValueMaxAC(maxValue))\n        dispatch(changeSetLocalAC(true))\n        dispatch(changeButtonDisabledAC(false))\n        dispatch(valueMaxDecreaseAC())\n    }\n\n    const settingValueMin = (event: ChangeEvent<HTMLInputElement>) => {\n        const value = event.currentTarget.value\n        if (!isFinite(+value)) return;\n        dispatch(settingValueMinAC(value))\n        dispatch(changeSetLocalAC(true))\n        dispatch(changeButtonDisabledAC(false))\n    }\n\n    const MinValueInc = () => {\n        dispatch(settingValueMinAC(minValue))\n        dispatch(changeSetLocalAC(true))\n        dispatch(changeButtonDisabledAC(false))\n        dispatch(minValueIncAC())\n    }\n\n    const MinValueDecrease = () => {\n        dispatch(settingValueMinAC(minValue))\n        dispatch(changeSetLocalAC(true))\n        dispatch(changeButtonDisabledAC(false))\n        dispatch(minValueDecreaseAC())\n    }\n\n    if (minValue >= maxValue || minValue < 0 || minValue === \"\" || maxValue === \"\") {\n        dispatch(changeErrorAC(true))\n        dispatch(changeButtonDisabledAC(true))\n    } else {\n        dispatch(changeErrorAC(false))\n    }\n\n    const saveLocalStorage = () => {\n        dispatch(changeButtonDisabledAC(true))\n\n        dispatch(changeDisplayValueAC(minValue))\n\n        dispatch(changeSetLocalAC(false))\n\n        saveState({\n            counter: store.getState().counter,\n        })\n    }\n\n    const styleButton = {\n        marginLeft: \"1px\",\n        minWidth: \"10px\",\n        padding: \"9.8px 6px\",\n        height: \"10px\",\n        borderRadius: \"4px\",\n    }\n\n    return (\n\n        <div className={s.wrapperSetting}>\n            <div className={s.inputWrapper}>\n                <InputCounter onChange={settingValueMax} value={maxValue}/>\n\n                <div className={s.buttonWrapper}>\n                    <Button color={\"inherit\"} variant={\"contained\"} onClick={MaxValueInc} style={styleButton}>+</Button>\n                    <Button color={\"inherit\"} variant={\"contained\"} onClick={MaxValueDecrease} style={styleButton}>-</Button>\n                </div>\n\n            </div>\n\n            <div className={s.inputWrapper}>\n                <InputCounter onChange={settingValueMin} value={minValue}/>\n\n                <div className={s.buttonWrapper}>\n                    <Button color={\"inherit\"} variant={\"contained\"} onClick={MinValueInc} style={styleButton}>+</Button>\n                    <Button color={\"inherit\"} variant={\"contained\"} onClick={MinValueDecrease} style={styleButton}>-</Button>\n                </div>\n\n            </div>\n\n            <ButtonCounter callback={saveLocalStorage} title={\"set\"} disabled={disabled}/>\n\n        </div>\n    )\n\n}","import {Fab} from \"@material-ui/core\";\nimport {Refresh} from \"@material-ui/icons\";\n\ntype ButtonType = {\n    callback: () => void\n    disabled: boolean\n}\n\n\nexport const ButtonReset = ({callback,...props}: ButtonType) => {\n    const callbackButton = () => {\n        callback()\n    }\n    return(\n        <div>\n            <Fab size={\"small\"} color={\"primary\"} disabled={props.disabled} onClick={callbackButton}>\n                <Refresh/>\n            </Fab>\n        </div>\n    )\n\n}","import {useDispatch, useSelector} from \"react-redux\";\nimport {rootReducerType} from \"../../reducers/store\";\nimport {incCounterAC, resetDisplayAC} from \"../../reducers/counter-reducer\";\nimport s from './Counter.module.css'\nimport {ButtonReset} from \"../Button/ButtonRES\";\nimport {ButtonCounter} from \"../Button/Button\";\n\n\n\nconst Counter = () => {\n    const minValueCounter = useSelector<rootReducerType, string|number>(state => state.counter.minValue)\n    const maxValueCounter = useSelector<rootReducerType, string|number>(state => state.counter.maxValue)\n    const error = useSelector<rootReducerType, boolean>(state => state.counter.error)\n    const setLocal = useSelector<rootReducerType, boolean>(state => state.counter.setLocal)\n\n    const displayValue = useSelector<rootReducerType, string|number>(state => state.counter.displayValue)\n    const dispatch = useDispatch()\n\n    const incCounter = () => {\n        dispatch(incCounterAC())\n    }\n\n    const resetDisplay = () => {\n        dispatch(resetDisplayAC(+minValueCounter))\n    }\n\n    return (\n        <div className={s.wrapperCounter}>\n            <div className={s.display}>\n                    {\n                        error ? <span style={{color: \"red\", fontSize:\"20px\",fontWeight:\"bold\"}}>Enter valid value!</span> :\n\n                            setLocal ? <span style={{color: \"blue\",fontSize:\"20px\",fontWeight:\"bold\"}}>Enter values and press \"set\"!</span>\n\n                                : <span style={displayValue === +maxValueCounter ? {color: \"red\", fontSize: \"40px\",fontWeight:\"bold\"} : {\n                                    color: \"black\",\n                                    fontSize: \"40px\",\n                                    fontWeight:\"bold\"\n                                }}>{displayValue}</span>\n                    }\n\n            </div>\n\n            <div className={s.buttonWrap}>\n                <ButtonCounter disabled={displayValue >= +maxValueCounter || setLocal} callback={incCounter} title={\"+\"}/>\n                <ButtonReset disabled={displayValue === +minValueCounter || setLocal} callback={resetDisplay}/>\n            </div>\n\n        </div>\n    )\n}\n\n\nexport default Counter;","import React from 'react';\nimport './App.module.css';\nimport s from './App.module.css'\nimport {Paper} from \"@material-ui/core\";\nimport {SettingCounter} from \"./Components/setting/SetingCounter\";\nimport Counter from \"./Components/Counter/Counter\";\n\n\nfunction App() {\n    return (\n\n        <div className={s.wrapper}>\n            <div className={s.App}>\n\n                <Paper style={{backgroundColor:\"#a5bfd0\"}} elevation={6}  variant=\"elevation\" >\n                <SettingCounter/>\n                </Paper >\n\n                <Paper style={{backgroundColor:\"#d3b8a1\"}} square={true} elevation={4}  variant=\"elevation\">\n                    <Counter/>\n                </Paper >\n\n            </div>\n        </div>\n\n    );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from \"./App\";\nimport {store} from \"./reducers/store\";\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App/>\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}